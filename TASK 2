/* Importing libraries */
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
/* from sklearn.datasets import load_boston */ 
/* Removed import */
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

/* Load the California Housing dataset instead */
from sklearn.datasets import fetch_california_housing # Import new dataset
housing = fetch_california_housing()
data = pd.DataFrame(housing.data, columns=housing.feature_names)
data['MEDV'] = housing.target
 /* Assuming you want to keep the target variable name */

/* Display the first few rows of the dataset */
data.head()
/* Define the features and target variable */
X = data.drop('MEDV', axis=1)
y = data['MEDV']
/* Split the data into training and testing sets */
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

/* Create and train the linear regression model */
model = LinearRegression()
model.fit(X_train, y_train)

/* Make predictions on the test set */
y_pred = model.predict(X_test)

/* Calculate evaluation metrics */
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

/* Plot actual vs. predicted values */
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, edgecolors=(0, 0, 0))
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=3)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Values')
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
/* from sklearn.datasets import load_boston # Removed this line */
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

/* Load the California Housing dataset instead */
from sklearn.datasets import fetch_california_housing
housing = fetch_california_housing()
data = pd.DataFrame(housing.data, columns=housing.feature_names)
data['MEDV'] = housing.target # Assuming you want to keep the same target variable name

/* Display the first few rows of the dataset */
print(data.head())

/* Define the features and target variable */
X = data.drop('MEDV', axis=1)
y = data['MEDV']

/* Split the data into training and testing sets */
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

/* Create and train the linear regression model */
model = LinearRegression()
model.fit(X_train, y_train)

/* Make predictions on the test set */
y_pred = model.predict(X_test)

/* Calculate evaluation metrics */
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

/* Plot actual vs. predicted values */
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, edgecolors=(0, 0, 0))
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=3)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Values')
plt.show()

